/** @section Grid Modules */

.grid-demo { 
	letter-spacing: 0;
	text-align: center;

	h6 {
		font-weight: 600;
	}

	p {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	* + p { margin-top: 5px; }
	* + .row { margin-top: 20px; }
	.row + .row { margin-top: 0; }

	@include media-breakpoint-up(xl) {
		text-align: left;

		p {
			white-space: normal;
			overflow: visible;
			text-overflow: unset;
		}

		* + p { margin-top: 25px; }
	}
}

.grid-demo-bordered {
	.row {
		border: 0 solid $gray-200;
		border-top-width: 1px;

		&:last-child {
			border-bottom-width: 1px;
		}
	}

	[class*='col'] {
		padding: 5px 15px;

		&:before {
			content: '';
			position: absolute;
			top: 0;
			bottom: 0;
			left: -1px;
			border-left: 1px solid $gray-200;
		}

		@include media-breakpoint-up(md) {
			padding: 30px;
		}

		@include media-breakpoint-up(xl) {
			padding: 50px 50px 45px;
		}
	}
}

.grid-demo-underlined {
	.row {
		border-bottom: 1px solid $gray-200;
	}

	[class*='col'] {
		padding: 5px 15px;

		@include media-breakpoint-up(md) { 
			padding-top: 25px;
			padding-bottom: 25px;
		}

		@include media-breakpoint-up(xl) {
			padding-top: 45px;
			padding-bottom: 45px;
		}
	}
}

// Custom Horizontal Spacing
.row-x-16 {
	margin-left: -8px;
	margin-right: -8px;

	> [class*='col'] {
		padding-left: 8px;
		padding-right: 8px;
	}
}

.row-lg-x-50 {
	@include media-breakpoint-up(lg) {
		margin-left: -25px;
		margin-right: -25px;

		> [class*='col'] {
			padding-left: 25px;
			padding-right: 25px;
		}
	}
}

.container-wide {
	@include media-breakpoint-up(xl) {
		max-width: 100%;
	} 
	
	@include media-breakpoint-up(xxl) {
		max-width: 1600px;
	} 
}

.container-fullwidth {
	max-width: 2050px; 
	margin-left: auto;
	margin-right: auto;
}

* + .container-fullwidth { margin-top: 25px; }

@include media-breakpoint-up(md) {
	* + .container-fullwidth { margin-top: 40px; } 
}

@include media-breakpoint-up(xl) {
	* + .container-fullwidth { margin-top: 50px; } 
} 


// Custom Grid
//
// Change $enable-grid-classes-custom: true
// that would generate custom grid (example: 10 columns)

$enable-grid-classes-custom: false;

@mixin make-grid-columns-custom($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}
		}
	}
}

@if $enable-grid-classes-custom {
	.row-ten {
		@include make-grid-columns-custom(10);
	}

	.row-xl-ten {
		@include make-grid-columns-custom(10, 30px, (xl: map-get($grid-breakpoints, xl), xlg: map-get($grid-breakpoints, xlg), xxl: map-get($grid-breakpoints, xxl)));
	}
}


//
// Range Grid System
//
.range {
	display: flex;
	flex-wrap: wrap;
}

.cell-inner {
	width: 100%;
	padding-right: 15px;
	padding-left: 15px;
}

.range > [class*='cell'] {
	position: relative;
	width: 100%;
	min-height: 1px;

	& > .row {
		margin: 0;
	}

	&.container {
		padding: 0;
	}
}

.range > [class*='col'] { padding: 0; }

@mixin cell($breakpoint, $columns) {
	flex: 0 0 #{grid-parameter($breakpoint, $columns)};
	max-width: #{grid-parameter($breakpoint, $columns)};
}

@mixin cell-inner($breakpoint, $columns) {
	max-width: map-get($container-max-widths, $breakpoint) / 12 * $columns;
}

@include media-breakpoint-up(sm) {
	.cell-sm-6 {
		@include cell(sm, 6);

		.cell-inner {
			@include cell-inner(sm, 6);
		}
	}

	.range > [class*='cell-sm']:nth-child(odd) {
		.cell-inner { margin-left: auto; }
	}

	.range.flex-sm-row-reverse {
		> [class*='cell-sm'] {
			&:nth-child(odd) .cell-inner { margin-left: 0; }
			&:nth-child(even) .cell-inner { margin-left: auto; }
		}
	}

	.range > [class*='cell-sm'].container {
		margin: 0;
	}
}

@include media-breakpoint-up(md) {
	.range > [class*='cell-md']:nth-child(odd) {
		.cell-inner { margin-left: auto; }
	}

	.range.flex-md-row-reverse {
		> [class*='cell-md'] {
			&:nth-child(odd) .cell-inner { margin-left: 0; }
			&:nth-child(even) .cell-inner { margin-left: auto; }
		}
	}

	.range > [class*='cell-md'].container {
		margin: 0;
	}

	.cell-md-5 {
		@include cell(md, 5);

		.cell-inner {
			@include cell-inner(md, 5);
		}
	}

	.cell-md-6 {
		@include cell(md, 6);

		.cell-inner {
			@include cell-inner(md, 6);
		}
	}
}

@include media-breakpoint-up(lg) {
	[class*='cell-lg'] > .row > [class*='col'] {
		flex-basis: 100%;
	}

	.cell-lg-5 {
		@include cell(lg, 5);

		.cell-inner {
			@include cell-inner(lg, 5);
		}
	}

	.cell-lg-6 {
		@include cell(lg, 6);

		.cell-inner {
			@include cell-inner(lg, 6);
		}
	}

	.range > [class*='cell-lg']:nth-child(odd) {
		.cell-inner { margin-left: auto; }
	}

	.range.flex-lg-row-reverse {
		> [class*='cell-lg'] {
			&:nth-child(odd) .cell-inner { margin-left: 0; }
			&:nth-child(even) .cell-inner { margin-left: auto; }
		}
	}

	.range > [class*='cell-lg'].container {
		margin: 0;
	}
}

@include media-breakpoint-up(xl) {
	.range > [class*='cell-xl'].container {
		margin: 0;
	}

	.range > [class*='cell-xl']:nth-child(odd) {
		.cell-inner { margin-left: auto; }
	}

	.range {
		.cell-inner {
			flex-basis: 100%;
		}
	}

	.cell-xl-7 {
		@include cell(xl, 7);

		.cell-inner {
			@include cell-inner(xl, 7);
		}
	}

	.cell-lg-6,
	.cell-xl-6 {
		@include cell(xl, 6);

		.cell-inner {
			@include cell-inner(xl, 6);
		}
	}

	.cell-xl-5 {
		@include cell(xl, 5);

		.cell-inner {
			@include cell-inner(xl, 5);
		}
	}

	.cell-xl-4 {
		@include cell(xl, 4); 

		.cell-inner {
			@include cell-inner(xl, 4);
		}
	}
}

@include media-breakpoint-up(xxl) {
	.cell-xxl-6 { 
		@include cell(xl, 6);

		.cell-inner {
			@include cell-inner(xl, 6);
		}
	}
} 
