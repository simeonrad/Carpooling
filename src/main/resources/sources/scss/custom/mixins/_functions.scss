//
// Functions
// --------------------------------------------------

// All Headings
// 
@function headings() {
	@return unquote("h1, h2, h3, h4, h5, h6, .heading");
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}


@function map-reverse($map) {
	$result: null;

	@if type-of($map) == "map" {
		$keys: map-keys($map);
		$map-reversed: ();

		@for $i from length($keys) through 1 {
			$map-reversed: map-merge(
					$map-reversed,
					(nth($keys, $i): map-get($map, nth($keys, $i)))
			);
		}

		@if type-of($map-reversed) == "map" {
			$result: $map-reversed;
		} @else {
			@warn 'There was an error reversing the order of "#{$map}"';
		}
	} @else {
		@warn '"#{$map}" is not a valid map';
	}

	@return $result;
}

@mixin charter-animation($animation-name, $frames) {
	@keyframes #{$animation-name} {
		@each $frame in map-keys($frames) {
			#{$frame + '%'} {
				$properties: map-get($frames, $frame);
				@each $property in map-keys($properties) {
					#{$property}: unquote(map-get($properties, $property));
				}
			}
		}
	}

	$frames: map-reverse($frames);

	@keyframes #{$animation-name + '-back'} {
		@each $frame in map-keys($frames) {
			#{100 - ($frame) + '%'} {
				$properties: map-get($frames, $frame);
				@each $property in map-keys($properties) {
					#{$property}: unquote(map-get($properties, $property));
				}
			}
		}
	}
}
